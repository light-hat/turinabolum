# Generated by Django 5.2.5 on 2025-08-30 20:17

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Malware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Уникальное название вредоносного ПО (например, IcedID)",
                        max_length=255,
                        unique=True,
                        verbose_name="Название",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание вредоносного ПО, функциональности, поведения и т.д.",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("RAT", "Remote Access Trojan"),
                            ("Trojan", "Trojan"),
                            ("Ransomware", "Ransomware"),
                            ("Loader", "Loader"),
                            ("Backdoor", "Backdoor"),
                            ("Spyware", "Spyware"),
                            ("Worm", "Worm"),
                            ("Virus", "Virus"),
                            ("Rootkit", "Rootkit"),
                            ("Miner", "Cryptocurrency Miner"),
                        ],
                        help_text="Тип вредоносного ПО",
                        max_length=100,
                        verbose_name="Тип",
                    ),
                ),
                (
                    "aliases",
                    models.TextField(
                        blank=True,
                        help_text="Известные псевдонимы и названия вредоносного ПО",
                        verbose_name="Псевдонимы",
                    ),
                ),
                (
                    "detection_names",
                    models.TextField(
                        blank=True,
                        help_text="Названия детектов в различных антивирусных решениях",
                        verbose_name="Названия детектов",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления вредоносного ПО в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего обновления информации о вредоносном ПО",
                        verbose_name="Дата изменения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Вредоносное ПО",
                "verbose_name_plural": "Вредоносные ПО",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Уникальное название тега для категоризации артефактов",
                        max_length=100,
                        unique=True,
                        verbose_name="Название тега",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Цвет для визуального выделения тега в формате HEX (#RRGGBB)",
                        max_length=7,
                        verbose_name="Цвет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тег",
                "verbose_name_plural": "Теги",
            },
        ),
        migrations.CreateModel(
            name="ThreatActor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Уникальное название угрозного актора (например, APT29)",
                        max_length=255,
                        unique=True,
                        verbose_name="Название",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание угрозного актора, методов, целей и т.д.",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "aliases",
                    models.TextField(
                        blank=True,
                        help_text="Известные псевдонимы и названия угрозного актора",
                        verbose_name="Псевдонимы",
                    ),
                ),
                (
                    "origin",
                    models.CharField(
                        blank=True,
                        help_text="Предполагаемое географическое или организационное происхождение",
                        max_length=100,
                        verbose_name="Происхождение",
                    ),
                ),
                (
                    "target_sectors",
                    models.TextField(
                        blank=True,
                        help_text="Секторы промышленности, на которые нацелен актор",
                        verbose_name="Целевые секторы",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления актора в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего обновления информации об акторе",
                        verbose_name="Дата изменения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Угрозный актор",
                "verbose_name_plural": "Угрозные акторы",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ThreatIntelFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Уникальное название фида Threat Intelligence",
                        max_length=255,
                        verbose_name="Название фида",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание фида и его содержания",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "feed_type",
                    models.CharField(
                        choices=[
                            ("STIX", "STIX"),
                            ("TAXII", "TAXII"),
                            ("CSV", "CSV"),
                            ("JSON", "JSON"),
                            ("RSS", "RSS"),
                        ],
                        help_text="Формат данных фида",
                        max_length=10,
                        verbose_name="Тип фида",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL адрес для доступа к фиду",
                        verbose_name="URL фида",
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="API ключ для доступа к фиду (если требуется)",
                        max_length=255,
                        verbose_name="API ключ",
                    ),
                ),
                (
                    "collection_name",
                    models.CharField(
                        blank=True,
                        help_text="Название коллекции TAXII (если применимо)",
                        max_length=255,
                        verbose_name="Название коллекции",
                    ),
                ),
                (
                    "polling_interval",
                    models.IntegerField(
                        default=3600,
                        help_text="Интервал опроса фида в секундах",
                        verbose_name="Интервал опроса",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Active", "Active"),
                            ("Paused", "Paused"),
                            ("Error", "Error"),
                        ],
                        default="Active",
                        help_text="Текущий статус фида",
                        max_length=10,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "last_successful_poll",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время последнего успешного опроса фида",
                        null=True,
                        verbose_name="Последний успешный опрос",
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True,
                        help_text="Текст последней ошибки при опросе фида",
                        verbose_name="Последняя ошибка",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления фида в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего изменения настроек фида",
                        verbose_name="Дата изменения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Threat Intelligence фид",
                "verbose_name_plural": "Threat Intelligence фиды",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "technique_id",
                    models.CharField(
                        help_text="Идентификатор техники по MITRE ATT&CK (например, T1059.003)",
                        max_length=20,
                        unique=True,
                        verbose_name="ID техники",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название техники по MITRE ATT&CK",
                        max_length=255,
                        verbose_name="Название",
                    ),
                ),
                (
                    "tactic",
                    models.CharField(
                        help_text="Тактика MITRE ATT&CK, к которой относится техника",
                        max_length=100,
                        verbose_name="Тактика",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание техники, методов обнаружения и рекомендации",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления техники в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего обновления информации о технике",
                        verbose_name="Дата изменения",
                    ),
                ),
            ],
            options={
                "verbose_name": "TTP",
                "verbose_name_plural": "TTPs",
                "ordering": ["technique_id"],
            },
        ),
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Краткое название расследования или кейса",
                        max_length=255,
                        verbose_name="Название расследования",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Подробное описание целей и задач расследования",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        help_text="Текущий статус расследования (например: Active, On Hold, Completed)",
                        max_length=50,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время создания расследования",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего изменения расследования",
                        verbose_name="Дата изменения",
                    ),
                ),
                (
                    "lead_investigator",
                    models.ForeignKey(
                        help_text="Пользователь, ведущий расследование",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Ведущий следователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Расследование",
                "verbose_name_plural": "Расследования",
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="EvidenceSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Disk Image", "Disk Image"),
                            ("Memory Dump", "Memory Dump"),
                            ("Network PCAP", "Network PCAP"),
                            ("Cloud Logs", "Cloud Logs"),
                            ("Endpoint Agent", "Endpoint Agent"),
                            ("Mobile Device", "Mobile Device"),
                            ("Email Archive", "Email Archive"),
                        ],
                        help_text="Тип источника цифровых доказательств",
                        max_length=50,
                        verbose_name="Тип источника",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Идентификационное название источника доказательств",
                        max_length=255,
                        verbose_name="Название",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание источника доказательств и контекста его получения",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "hash_md5",
                    models.CharField(
                        blank=True,
                        help_text="MD5 хеш-сумма образа или файла источника",
                        max_length=32,
                        verbose_name="MD5 хеш",
                    ),
                ),
                (
                    "hash_sha1",
                    models.CharField(
                        blank=True,
                        help_text="SHA-1 хеш-сумма образа или файла источника",
                        max_length=40,
                        verbose_name="SHA-1 хеш",
                    ),
                ),
                (
                    "hash_sha256",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 хеш-сумма образа или файла источника",
                        max_length=64,
                        verbose_name="SHA-256 хеш",
                    ),
                ),
                (
                    "acquisition_date",
                    models.DateTimeField(
                        help_text="Дата и время получения/создания образа доказательств",
                        verbose_name="Дата получения",
                    ),
                ),
                (
                    "acquisition_tool",
                    models.CharField(
                        blank=True,
                        help_text="Название инструмента, использованного для получения доказательств",
                        max_length=100,
                        verbose_name="Инструмент получения",
                    ),
                ),
                (
                    "custodian",
                    models.CharField(
                        blank=True,
                        help_text="Владелец устройства или данных",
                        max_length=255,
                        verbose_name="Владелец",
                    ),
                ),
                (
                    "storage_location",
                    models.CharField(
                        help_text="Путь к файлу в системе хранения (например, в S3)",
                        max_length=500,
                        verbose_name="Место хранения",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Расследование, к которому относится данный источник доказательств",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evidence_sources",
                        to="core.case",
                        verbose_name="Расследование",
                    ),
                ),
            ],
            options={
                "verbose_name": "Источник доказательств",
                "verbose_name_plural": "Источники доказательств",
            },
        ),
        migrations.CreateModel(
            name="Artifact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("File", "File"),
                            ("Registry Key", "Registry Key"),
                            ("Process", "Process"),
                            ("Network Connection", "Network Connection"),
                            ("Event Log", "Event Log"),
                            ("Browser History", "Browser History"),
                            ("Scheduled Task", "Scheduled Task"),
                            ("Windows Service", "Windows Service"),
                            ("Memory Allocation", "Memory Allocation"),
                            ("URL", "URL"),
                        ],
                        help_text="Тип цифрового артефакта",
                        max_length=50,
                        verbose_name="Тип артефакта",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Имя или идентификатор артефакта",
                        max_length=255,
                        verbose_name="Название",
                    ),
                ),
                (
                    "path",
                    models.TextField(
                        blank=True,
                        help_text="Полный путь к артефакту в исходной системе",
                        verbose_name="Путь",
                    ),
                ),
                (
                    "size",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Размер артефакта в байтах",
                        null=True,
                        verbose_name="Размер",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время создания артефакта в исходной системе",
                        null=True,
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время последнего изменения артефакта в исходной системе",
                        null=True,
                        verbose_name="Дата изменения",
                    ),
                ),
                (
                    "accessed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время последнего доступа к артефакту в исходной системе",
                        null=True,
                        verbose_name="Дата доступа",
                    ),
                ),
                (
                    "hash_md5",
                    models.CharField(
                        blank=True,
                        help_text="MD5 хеш-сумма артефакта (если применимо)",
                        max_length=32,
                        verbose_name="MD5 хеш",
                    ),
                ),
                (
                    "hash_sha1",
                    models.CharField(
                        blank=True,
                        help_text="SHA-1 хеш-сумма артефакта (если применимо)",
                        max_length=40,
                        verbose_name="SHA-1 хеш",
                    ),
                ),
                (
                    "hash_sha256",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 хеш-сумма артефакта (если применимо)",
                        max_length=64,
                        verbose_name="SHA-256 хеш",
                    ),
                ),
                (
                    "is_suspicious",
                    models.BooleanField(
                        default=False,
                        help_text="Отметка о подозрительной природе артефакта",
                        verbose_name="Подозрительный",
                    ),
                ),
                (
                    "raw_data_reference",
                    models.CharField(
                        blank=True,
                        help_text="Путь к raw-данным артефакта в системе хранения (если хранятся отдельно)",
                        max_length=500,
                        verbose_name="Ссылка на данные",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="Источник доказательств, из которого был извлечен артефакт",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="artifacts",
                        to="core.evidencesource",
                        verbose_name="Источник",
                    ),
                ),
            ],
            options={
                "verbose_name": "Артефакт",
                "verbose_name_plural": "Артефакты",
            },
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Краткое описательное название инцидента",
                        max_length=255,
                        verbose_name="Название инцидента",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Подробное описание инцидента, обстоятельств обнаружения и т.д.",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("New", "New"),
                            ("In Progress", "In Progress"),
                            ("On Hold", "On Hold"),
                            ("Closed", "Closed"),
                            ("Reopened", "Reopened"),
                        ],
                        default="New",
                        help_text="Текущий статус обработки инцидента",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("Critical", "Critical"),
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                            ("Info", "Info"),
                        ],
                        help_text="Уровень критичности инцидента",
                        max_length=20,
                        verbose_name="Критичность",
                    ),
                ),
                (
                    "classification",
                    models.CharField(
                        choices=[
                            ("Malware", "Malware"),
                            ("Phishing", "Phishing"),
                            ("Data Exfiltration", "Data Exfiltration"),
                            ("Insider Threat", "Insider Threat"),
                        ],
                        help_text="Тип инцидента согласно классификации",
                        max_length=50,
                        verbose_name="Классификация",
                    ),
                ),
                (
                    "confidentiality",
                    models.CharField(
                        default="Internal",
                        help_text="Уровень конфиденциальности информации об инциденте",
                        max_length=50,
                        verbose_name="Конфиденциальность",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время регистрации инцидента в системе",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего изменения данных инцидента",
                        verbose_name="Дата изменения",
                    ),
                ),
                (
                    "closed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время закрытия инцидента",
                        null=True,
                        verbose_name="Дата закрытия",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Пользователь, ответственный за расследование инцидента",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_incidents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Ответственный",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Пользователь, зарегистрировавший инцидент в системе",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_incidents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кем создан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Инцидент",
                "verbose_name_plural": "Инциденты",
                "ordering": ["-created_date"],
            },
        ),
        migrations.AddField(
            model_name="case",
            name="incident",
            field=models.ForeignKey(
                help_text="Связанный инцидент, для которого создано расследование",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cases",
                to="core.incident",
                verbose_name="Инцидент",
            ),
        ),
        migrations.CreateModel(
            name="IOC",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Hash", "Hash"),
                            ("IP Address", "IP Address"),
                            ("Domain", "Domain"),
                            ("URL", "URL"),
                            ("Email", "Email"),
                            ("Filename", "Filename"),
                            ("Mutex", "Mutex"),
                            ("Registry Key", "Registry Key"),
                            ("User Agent", "User Agent"),
                        ],
                        help_text="Тип индикатора компрометации",
                        max_length=20,
                        verbose_name="Тип IOC",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Фактическое значение индикатора компрометации",
                        max_length=500,
                        verbose_name="Значение",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Контекст и пояснения по данному IOC",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время первого обнаружения данного IOC",
                        null=True,
                        verbose_name="Первое появление",
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время последнего обнаружения данного IOC",
                        null=True,
                        verbose_name="Последнее появление",
                    ),
                ),
                (
                    "tlp",
                    models.CharField(
                        choices=[
                            ("RED", "RED"),
                            ("AMBER", "AMBER"),
                            ("GREEN", "GREEN"),
                            ("WHITE", "WHITE"),
                        ],
                        default="WHITE",
                        help_text="Уровень распространения по протоколу TLP",
                        max_length=10,
                        verbose_name="TLP",
                    ),
                ),
                (
                    "confidence",
                    models.CharField(
                        choices=[
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        default="Medium",
                        help_text="Уровень достоверности индикатора",
                        max_length=10,
                        verbose_name="Достоверность",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления IOC в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Расследование, в рамках которого был обнаружен IOC",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="iocs",
                        to="core.case",
                        verbose_name="Расследование",
                    ),
                ),
            ],
            options={
                "verbose_name": "IOC",
                "verbose_name_plural": "IOCs",
            },
        ),
        migrations.CreateModel(
            name="IncidentMalware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        help_text="Версия или вариант вредоносного ПО, если известно",
                        max_length=100,
                        verbose_name="Версия",
                    ),
                ),
                (
                    "evidence",
                    models.TextField(
                        blank=True,
                        help_text="Доказательства наличия вредоносного ПО в инциденте",
                        verbose_name="Доказательства",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время установления связи",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        help_text="Инцидент, связанный с вредоносным ПО",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.incident",
                        verbose_name="Инцидент",
                    ),
                ),
                (
                    "malware",
                    models.ForeignKey(
                        help_text="Вредоносное ПО, связанное с инцидентом",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.malware",
                        verbose_name="Вредоносное ПО",
                    ),
                ),
            ],
            options={
                "verbose_name": "Связь инцидента с вредоносным ПО",
                "verbose_name_plural": "Связи инцидентов с вредоносным ПО",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Краткий заголовок уведомления",
                        max_length=255,
                        verbose_name="Заголовок",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Подробное содержание уведомления",
                        verbose_name="Сообщение",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("Correlation", "Correlation"),
                            ("Incident", "Incident"),
                            ("System", "System"),
                            ("TI", "Threat Intelligence"),
                        ],
                        help_text="Тип уведомления",
                        max_length=20,
                        verbose_name="Тип уведомления",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("Critical", "Critical"),
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                            ("Info", "Info"),
                        ],
                        default="Medium",
                        help_text="Уровень критичности уведомления",
                        max_length=10,
                        verbose_name="Критичность",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время создания уведомления",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        default=False,
                        help_text="Отметка о прочтении уведомления",
                        verbose_name="Прочитано",
                    ),
                ),
                (
                    "read_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время прочтения уведомления",
                        null=True,
                        verbose_name="Дата прочтения",
                    ),
                ),
                (
                    "related_object_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Идентификатор связанного объекта (например, инцидента)",
                        null=True,
                        verbose_name="ID связанного объекта",
                    ),
                ),
                (
                    "related_content_type",
                    models.CharField(
                        blank=True,
                        help_text="Тип связанного объекта (например, 'incident')",
                        max_length=100,
                        verbose_name="Тип связанного объекта",
                    ),
                ),
            ],
            options={
                "verbose_name": "Уведомление",
                "verbose_name_plural": "Уведомления",
                "ordering": ["-created_date"],
                "indexes": [
                    models.Index(
                        fields=["is_read", "created_date"],
                        name="core_notifi_is_read_f1938d_idx",
                    ),
                    models.Index(
                        fields=["notification_type", "severity"],
                        name="core_notifi_notific_b71298_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ArtifactTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления тега к артефакту",
                        verbose_name="Дата добавления",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        help_text="Пользователь, добавивший тег к артефакту",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кем добавлен",
                    ),
                ),
                (
                    "artifact",
                    models.ForeignKey(
                        help_text="Артефакт, к которому применяется тег",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.artifact",
                        verbose_name="Артефакт",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        help_text="Тег, применяемый к артефакту",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.tag",
                        verbose_name="Тег",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тег артефакта",
                "verbose_name_plural": "Теги артефактов",
            },
        ),
        migrations.CreateModel(
            name="IncidentThreatActor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "confidence",
                    models.CharField(
                        choices=[
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        default="Medium",
                        help_text="Уровень достоверности связи инцидента с угрозным актором",
                        max_length=10,
                        verbose_name="Достоверность",
                    ),
                ),
                (
                    "evidence",
                    models.TextField(
                        blank=True,
                        help_text="Доказательства, подтверждающие связь инцидента с угрозным актором",
                        verbose_name="Доказательства",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время установления связи",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        help_text="Инцидент, связанный с угрозным актором",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.incident",
                        verbose_name="Инцидент",
                    ),
                ),
                (
                    "threat_actor",
                    models.ForeignKey(
                        help_text="Угрозный актор, связанный с инцидентом",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.threatactor",
                        verbose_name="Угрозный актор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Связь инцидента с угрозным актором",
                "verbose_name_plural": "Связи инцидентов с угрозными акторами",
            },
        ),
        migrations.CreateModel(
            name="ThreatIntelIOC",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Hash", "Hash"),
                            ("IP Address", "IP Address"),
                            ("Domain", "Domain"),
                            ("URL", "URL"),
                            ("Email", "Email"),
                            ("Filename", "Filename"),
                            ("Mutex", "Mutex"),
                            ("Registry Key", "Registry Key"),
                            ("User Agent", "User Agent"),
                        ],
                        help_text="Тип индикатора компрометации",
                        max_length=20,
                        verbose_name="Тип IOC",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Фактическое значение индикатора компрометации",
                        max_length=500,
                        verbose_name="Значение",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Контекст и пояснения по данному IOC из фида",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время первого появления IOC в фиде",
                        null=True,
                        verbose_name="Первое появление",
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время последнего появления IOC в фиде",
                        null=True,
                        verbose_name="Последнее появление",
                    ),
                ),
                (
                    "confidence",
                    models.CharField(
                        choices=[
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        default="Medium",
                        help_text="Уровень достоверности индикатора согласно фиду",
                        max_length=10,
                        verbose_name="Достоверность",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("Critical", "Critical"),
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        default="Medium",
                        help_text="Уровень критичности индикатора согласно фиду",
                        max_length=10,
                        verbose_name="Критичность",
                    ),
                ),
                (
                    "tlp",
                    models.CharField(
                        choices=[
                            ("RED", "RED"),
                            ("AMBER", "AMBER"),
                            ("GREEN", "GREEN"),
                            ("WHITE", "WHITE"),
                        ],
                        default="WHITE",
                        help_text="Уровень распространения по протоколу TLP",
                        max_length=10,
                        verbose_name="TLP",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время добавления IOC в систему",
                        verbose_name="Дата создания",
                    ),
                ),
                (
                    "modified_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата и время последнего обновления IOC",
                        verbose_name="Дата изменения",
                    ),
                ),
                (
                    "feed",
                    models.ForeignKey(
                        help_text="Фид, из которого получен IOC",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.threatintelfeed",
                        verbose_name="Фид",
                    ),
                ),
            ],
            options={
                "verbose_name": "Threat Intelligence IOC",
                "verbose_name_plural": "Threat Intelligence IOC",
            },
        ),
        migrations.CreateModel(
            name="CorrelationResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "correlation_type",
                    models.CharField(
                        choices=[
                            ("TI", "Threat Intelligence"),
                            ("Internal", "Internal IOC"),
                            ("Behavioral", "Behavioral"),
                        ],
                        help_text="Тип обнаруженной корреляции",
                        max_length=20,
                        verbose_name="Тип корреляции",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("Critical", "Critical"),
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                            ("Info", "Info"),
                        ],
                        default="Medium",
                        help_text="Уровень критичности корреляции",
                        max_length=10,
                        verbose_name="Критичность",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        default=0.0,
                        help_text="Уровень достоверности корреляции от 0.0 до 1.0",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Достоверность",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Подробное описание корреляции и ее контекста",
                        verbose_name="Описание",
                    ),
                ),
                (
                    "detected_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время обнаружения корреляции",
                        verbose_name="Дата обнаружения",
                    ),
                ),
                (
                    "is_false_positive",
                    models.BooleanField(
                        default=False,
                        help_text="Отметка о том, является ли корреляция ложным срабатыванием",
                        verbose_name="Ложное срабатывание",
                    ),
                ),
                (
                    "false_positive_reason",
                    models.TextField(
                        blank=True,
                        help_text="Причина, по которой корреляция была помечена как ложное срабатывание",
                        verbose_name="Причина ложного срабатывания",
                    ),
                ),
                (
                    "artifact",
                    models.ForeignKey(
                        help_text="Артефакт, для которого обнаружена корреляция",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.artifact",
                        verbose_name="Артефакт",
                    ),
                ),
                (
                    "detected_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Пользователь или система, обнаружившая корреляцию",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обнаружено",
                    ),
                ),
                (
                    "source_ioc",
                    models.ForeignKey(
                        blank=True,
                        help_text="Внутренний IOC, с которым обнаружена корреляция",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.ioc",
                        verbose_name="Внутренний IOC",
                    ),
                ),
                (
                    "source_ti_ioc",
                    models.ForeignKey(
                        blank=True,
                        help_text="Threat Intelligence IOC, с которым обнаружена корреляция",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.threatintelioc",
                        verbose_name="TI IOC",
                    ),
                ),
            ],
            options={
                "verbose_name": "Результат корреляции",
                "verbose_name_plural": "Результаты корреляции",
                "ordering": ["-detected_date"],
            },
        ),
        migrations.CreateModel(
            name="CaseTTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Заметки по применению техники в данном расследовании",
                        verbose_name="Заметки",
                    ),
                ),
                (
                    "detected_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время обнаружения техники в расследовании",
                        verbose_name="Дата обнаружения",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="Расследование, в котором была обнаружена техника",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.case",
                        verbose_name="Расследование",
                    ),
                ),
                (
                    "detected_by",
                    models.ForeignKey(
                        help_text="Пользователь, обнаруживший применение техники",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обнаружено",
                    ),
                ),
                (
                    "ttp",
                    models.ForeignKey(
                        help_text="Техника, тактика или процедура, обнаруженная в расследовании",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.ttp",
                        verbose_name="TTP",
                    ),
                ),
            ],
            options={
                "verbose_name": "TTP расследования",
                "verbose_name_plural": "TTPs расследований",
            },
        ),
        migrations.CreateModel(
            name="UserNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        default=False,
                        help_text="Отметка о прочтении уведомления пользователем",
                        verbose_name="Прочитано",
                    ),
                ),
                (
                    "read_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата и время прочтения уведомления пользователем",
                        null=True,
                        verbose_name="Дата прочтения",
                    ),
                ),
                (
                    "notification",
                    models.ForeignKey(
                        help_text="Связанное уведомление",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.notification",
                        verbose_name="Уведомление",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Пользователь, для которого предназначено уведомление",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользовательское уведомление",
                "verbose_name_plural": "Пользовательские уведомления",
            },
        ),
        migrations.CreateModel(
            name="DumpUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "upload_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время загрузки дампа",
                        verbose_name="Дата загрузки",
                    ),
                ),
                (
                    "dump_type",
                    models.CharField(
                        choices=[
                            ("Memory", "Memory Dump"),
                            ("Disk", "Disk Image"),
                            ("Network", "PCAP"),
                            ("Logs", "Log Files"),
                            ("Other", "Other"),
                        ],
                        help_text="Тип загруженного дампа",
                        max_length=20,
                        verbose_name="Тип дампа",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        help_text="Оригинальное имя загруженного файла",
                        max_length=255,
                        verbose_name="Исходное имя файла",
                    ),
                ),
                (
                    "dump_file",
                    models.FileField(
                        help_text="Файл дампа, загруженный в систему хранения",
                        upload_to="dumps/%Y/%m/%d/",
                        verbose_name="Файл дампа",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Uploaded", "Uploaded"),
                            ("Processing", "Processing"),
                            ("Analyzed", "Analyzed"),
                            ("Failed", "Failed"),
                        ],
                        default="Uploaded",
                        help_text="Текущий статус обработки дампа",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        default=0,
                        help_text="Размер файла дампа в байтах",
                        verbose_name="Размер файла",
                    ),
                ),
                (
                    "md5_hash",
                    models.CharField(
                        blank=True,
                        help_text="MD5 хеш-сумма файла дампа",
                        max_length=32,
                        verbose_name="MD5 хеш",
                    ),
                ),
                (
                    "sha1_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-1 хеш-сумма файла дампа",
                        max_length=40,
                        verbose_name="SHA-1 хеш",
                    ),
                ),
                (
                    "sha256_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 хеш-сумма файла дампа",
                        max_length=64,
                        verbose_name="SHA-256 хеш",
                    ),
                ),
                (
                    "processing_log",
                    models.TextField(
                        blank=True,
                        help_text="Лог процесса обработки дампа (ошибки, предупреждения, результаты)",
                        verbose_name="Лог обработки",
                    ),
                ),
                (
                    "analysis_results",
                    models.JSONField(
                        blank=True,
                        help_text="Результаты автоматического анализа дампа в формате JSON",
                        null=True,
                        verbose_name="Результаты анализа",
                    ),
                ),
                (
                    "kafka_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Идентификатор сообщения Kafka, отправленного для обработки дампа",
                        max_length=100,
                        verbose_name="ID сообщения Kafka",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="Пользователь, загрузивший дамп",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кем загружен",
                    ),
                ),
            ],
            options={
                "verbose_name": "Загрузка дампа",
                "verbose_name_plural": "Загрузки дампов",
                "ordering": ["-upload_date"],
                "indexes": [
                    models.Index(
                        fields=["uploaded_by", "status"],
                        name="core_dumpup_uploade_c215f1_idx",
                    ),
                    models.Index(
                        fields=["md5_hash", "sha1_hash", "sha256_hash"],
                        name="core_dumpup_md5_has_1fe239_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="ioc",
            index=models.Index(
                fields=["type", "value"], name="core_ioc_type_cf7b76_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ioc",
            index=models.Index(fields=["value"], name="core_ioc_value_6c3a09_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="incidentmalware",
            unique_together={("incident", "malware")},
        ),
        migrations.AlterUniqueTogether(
            name="artifacttag",
            unique_together={("artifact", "tag")},
        ),
        migrations.AlterUniqueTogether(
            name="incidentthreatactor",
            unique_together={("incident", "threat_actor")},
        ),
        migrations.AddIndex(
            model_name="threatintelioc",
            index=models.Index(
                fields=["type", "value"], name="core_threat_type_b30e32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="threatintelioc",
            index=models.Index(
                fields=["feed", "created_date"], name="core_threat_feed_id_6f09a1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="threatintelioc",
            unique_together={("feed", "type", "value")},
        ),
        migrations.AddIndex(
            model_name="correlationresult",
            index=models.Index(
                fields=["artifact", "correlation_type"],
                name="core_correl_artifac_f6ead5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="correlationresult",
            index=models.Index(
                fields=["detected_date", "severity"],
                name="core_correl_detecte_d7e9d6_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="casettp",
            unique_together={("case", "ttp")},
        ),
        migrations.AddIndex(
            model_name="usernotification",
            index=models.Index(
                fields=["user", "is_read"], name="core_userno_user_id_4636e4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usernotification",
            unique_together={("user", "notification")},
        ),
    ]
